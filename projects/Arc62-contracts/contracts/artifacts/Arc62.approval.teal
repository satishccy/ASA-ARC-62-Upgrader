#pragma version 10
intcblock 0 32 1
bytecblock 0x67656e65726963 0x6275726e6564 0x6c6f636b6564 0x 0x61737365745f6964

// This TEAL was generated by TEALScript v0.105.5
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,address,address,address)void
*abi_route_createApplication:
	// generic: address
	txna ApplicationArgs 4
	dup
	len
	intc 1 // 32
	==

	// argument 0 (generic) for createApplication must be a address
	assert

	// locked: address
	txna ApplicationArgs 3
	dup
	len
	intc 1 // 32
	==

	// argument 1 (locked) for createApplication must be a address
	assert

	// burned: address
	txna ApplicationArgs 2
	dup
	len
	intc 1 // 32
	==

	// argument 2 (burned) for createApplication must be a address
	assert

	// asset_id: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,address,address,address)void
	callsub createApplication
	intc 2 // 1
	return

// createApplication(asset_id: uint64, burned: Address, locked: Address, generic: Address): void
createApplication:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\Arc62.algo.ts:14
	// asset = AssetID.fromUint64(asset_id)
	frame_dig -1 // asset_id: uint64
	frame_bury 0 // asset: uint64

	// contracts\Arc62.algo.ts:15
	// assert(this.txn.sender === asset.manager, 'Only the asset manager can create an application')
	txn Sender
	frame_dig 0 // asset: uint64
	asset_params_get AssetManager
	pop
	==

	// Only the asset manager can create an application
	assert

	// contracts\Arc62.algo.ts:16
	// assert(this.asset_id.exists === false, 'Application already exists')
	txna Applications 0
	bytec 4 //  "asset_id"
	app_global_get_ex
	swap
	pop
	intc 0 // 0
	==

	// Application already exists
	assert

	// contracts\Arc62.algo.ts:17
	// this.asset_id.value = asset.id
	bytec 4 //  "asset_id"
	frame_dig 0 // asset: uint64
	app_global_put

	// contracts\Arc62.algo.ts:18
	// this.not_circulating_label_1.value = burned
	bytec 1 //  "burned"
	frame_dig -2 // burned: Address
	app_global_put

	// contracts\Arc62.algo.ts:19
	// this.not_circulating_label_2.value = locked
	bytec 2 //  "locked"
	frame_dig -3 // locked: Address
	app_global_put

	// contracts\Arc62.algo.ts:20
	// this.not_circulating_label_3.value = generic
	bytec 0 //  "generic"
	frame_dig -4 // generic: Address
	app_global_put
	retsub

// set_not_circulating_address(address,string)void
*abi_route_set_not_circulating_address:
	// label: string
	txna ApplicationArgs 2
	extract 2 0

	// address: address
	txna ApplicationArgs 1
	dup
	len
	intc 1 // 32
	==

	// argument 1 (address) for set_not_circulating_address must be a address
	assert

	// execute set_not_circulating_address(address,string)void
	callsub set_not_circulating_address
	intc 2 // 1
	return

// set_not_circulating_address(address: Address, label: string): void
set_not_circulating_address:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x

	// contracts\Arc62.algo.ts:24
	// asset = AssetID.fromUint64(this.asset_id.value)
	bytec 4 //  "asset_id"
	app_global_get
	frame_bury 0 // asset: uint64

	// contracts\Arc62.algo.ts:25
	// assert(this.txn.sender === asset.manager, 'Only the asset manager can set the not circulating address')
	txn Sender
	frame_dig 0 // asset: uint64
	asset_params_get AssetManager
	pop
	==

	// Only the asset manager can set the not circulating address
	assert

	// *if0_condition
	// contracts\Arc62.algo.ts:27
	// label === 'burned'
	frame_dig -2 // label: string
	bytec 1 //  "burned"
	==
	bz *if0_elseif1_condition

	// *if0_consequent
	// contracts\Arc62.algo.ts:28
	// this.not_circulating_label_1.value = address
	bytec 1 //  "burned"
	frame_dig -1 // address: Address
	app_global_put
	b *if0_end

*if0_elseif1_condition:
	// contracts\Arc62.algo.ts:29
	// label === 'locked'
	frame_dig -2 // label: string
	bytec 2 //  "locked"
	==
	bz *if0_elseif2_condition

	// *if0_elseif1_consequent
	// contracts\Arc62.algo.ts:30
	// this.not_circulating_label_2.value = address
	bytec 2 //  "locked"
	frame_dig -1 // address: Address
	app_global_put
	b *if0_end

*if0_elseif2_condition:
	// contracts\Arc62.algo.ts:31
	// label === 'generic'
	frame_dig -2 // label: string
	bytec 0 //  "generic"
	==
	bz *if0_else

	// *if0_elseif2_consequent
	// contracts\Arc62.algo.ts:32
	// this.not_circulating_label_3.value = address
	bytec 0 //  "generic"
	frame_dig -1 // address: Address
	app_global_put
	b *if0_end

*if0_else:
	// contracts\Arc62.algo.ts:34
	// assert(false, 'Invalid label')
	intc 0 // 0

	// Invalid label
	assert

*if0_end:
	retsub

// arc62_get_circulating_supply(uint64)uint64
*abi_route_arc62_get_circulating_supply:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// asset_id: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc62_get_circulating_supply(uint64)uint64
	callsub arc62_get_circulating_supply
	itob
	concat
	log
	intc 2 // 1
	return

// arc62_get_circulating_supply(asset_id: uint64): uint64
arc62_get_circulating_supply:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 3 // 0x
	dupn 4

	// contracts\Arc62.algo.ts:39
	// asset = AssetID.fromUint64(asset_id)
	frame_dig -1 // asset_id: uint64
	frame_bury 0 // asset: uint64

	// contracts\Arc62.algo.ts:40
	// assert(this.asset_id.value === asset.id, 'Invalid assetId')
	bytec 4 //  "asset_id"
	app_global_get
	frame_dig 0 // asset: uint64
	==

	// Invalid assetId
	assert

	// contracts\Arc62.algo.ts:42
	// reserveBalance: uint64 = 0
	intc 0 // 0
	frame_bury 1 // reserveBalance: uint64

	// contracts\Arc62.algo.ts:43
	// not_circulating_label_1_balance = 0
	intc 0 // 0
	frame_bury 2 // not_circulating_label_1_balance: uint64

	// contracts\Arc62.algo.ts:44
	// not_circulating_label_2_balance = 0
	intc 0 // 0
	frame_bury 3 // not_circulating_label_2_balance: uint64

	// contracts\Arc62.algo.ts:45
	// not_circulating_label_3_balance = 0
	intc 0 // 0
	frame_bury 4 // not_circulating_label_3_balance: uint64

	// *if1_condition
	// contracts\Arc62.algo.ts:47
	// asset.reserve === globals.zeroAddress || asset.reserve.isOptedInToAsset(asset_id) === false
	frame_dig 0 // asset: uint64
	asset_params_get AssetReserve
	pop
	global ZeroAddress
	==
	dup
	bnz *skip_or0
	frame_dig 0 // asset: uint64
	asset_params_get AssetReserve
	pop
	frame_dig -1 // asset_id: uint64
	asset_holding_get AssetBalance
	swap
	pop
	intc 0 // 0
	==
	||

*skip_or0:
	bz *if1_else

	// *if1_consequent
	// contracts\Arc62.algo.ts:48
	// reserveBalance = 0
	intc 0 // 0
	frame_bury 1 // reserveBalance: uint64
	b *if1_end

*if1_else:
	// contracts\Arc62.algo.ts:50
	// reserveBalance = asset.reserve.assetBalance(asset)
	frame_dig 0 // asset: uint64
	asset_params_get AssetReserve
	pop
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	pop
	frame_bury 1 // reserveBalance: uint64

*if1_end:
	// *if2_condition
	// contracts\Arc62.algo.ts:54
	// this.not_circulating_label_1.exists === false ||
	//       this.not_circulating_label_1.value.isOptedInToAsset(asset_id) === false ||
	//       this.not_circulating_label_1.value === globals.zeroAddress
	txna Applications 0
	bytec 1 //  "burned"
	app_global_get_ex
	swap
	pop
	intc 0 // 0
	==
	dup
	bnz *skip_or1
	bytec 1 //  "burned"
	app_global_get
	frame_dig -1 // asset_id: uint64
	asset_holding_get AssetBalance
	swap
	pop
	intc 0 // 0
	==
	||

*skip_or1:
	dup
	bnz *skip_or2
	bytec 1 //  "burned"
	app_global_get
	global ZeroAddress
	==
	||

*skip_or2:
	bz *if2_else

	// *if2_consequent
	// contracts\Arc62.algo.ts:58
	// not_circulating_label_1_balance = 0
	intc 0 // 0
	frame_bury 2 // not_circulating_label_1_balance: uint64
	b *if2_end

*if2_else:
	// contracts\Arc62.algo.ts:60
	// not_circulating_label_1_balance = this.not_circulating_label_1.value.assetBalance(asset)
	bytec 1 //  "burned"
	app_global_get
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	pop
	frame_bury 2 // not_circulating_label_1_balance: uint64

*if2_end:
	// *if3_condition
	// contracts\Arc62.algo.ts:64
	// this.not_circulating_label_2.exists === false ||
	//       this.not_circulating_label_2.value.isOptedInToAsset(asset_id) === false ||
	//       this.not_circulating_label_2.value === globals.zeroAddress
	txna Applications 0
	bytec 2 //  "locked"
	app_global_get_ex
	swap
	pop
	intc 0 // 0
	==
	dup
	bnz *skip_or3
	bytec 2 //  "locked"
	app_global_get
	frame_dig -1 // asset_id: uint64
	asset_holding_get AssetBalance
	swap
	pop
	intc 0 // 0
	==
	||

*skip_or3:
	dup
	bnz *skip_or4
	bytec 2 //  "locked"
	app_global_get
	global ZeroAddress
	==
	||

*skip_or4:
	bz *if3_else

	// *if3_consequent
	// contracts\Arc62.algo.ts:68
	// not_circulating_label_2_balance = 0
	intc 0 // 0
	frame_bury 3 // not_circulating_label_2_balance: uint64
	b *if3_end

*if3_else:
	// contracts\Arc62.algo.ts:70
	// not_circulating_label_2_balance = this.not_circulating_label_2.value.assetBalance(asset)
	bytec 2 //  "locked"
	app_global_get
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	pop
	frame_bury 3 // not_circulating_label_2_balance: uint64

*if3_end:
	// *if4_condition
	// contracts\Arc62.algo.ts:74
	// this.not_circulating_label_3.exists === false ||
	//       this.not_circulating_label_3.value.isOptedInToAsset(asset_id) === false ||
	//       this.not_circulating_label_3.value === globals.zeroAddress
	txna Applications 0
	bytec 0 //  "generic"
	app_global_get_ex
	swap
	pop
	intc 0 // 0
	==
	dup
	bnz *skip_or5
	bytec 0 //  "generic"
	app_global_get
	frame_dig -1 // asset_id: uint64
	asset_holding_get AssetBalance
	swap
	pop
	intc 0 // 0
	==
	||

*skip_or5:
	dup
	bnz *skip_or6
	bytec 0 //  "generic"
	app_global_get
	global ZeroAddress
	==
	||

*skip_or6:
	bz *if4_else

	// *if4_consequent
	// contracts\Arc62.algo.ts:78
	// not_circulating_label_3_balance = 0
	intc 0 // 0
	frame_bury 4 // not_circulating_label_3_balance: uint64
	b *if4_end

*if4_else:
	// contracts\Arc62.algo.ts:80
	// not_circulating_label_3_balance = this.not_circulating_label_3.value.assetBalance(asset)
	bytec 0 //  "generic"
	app_global_get
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	pop
	frame_bury 4 // not_circulating_label_3_balance: uint64

*if4_end:
	// contracts\Arc62.algo.ts:83
	// return (
	//       asset.total -
	//       reserveBalance -
	//       not_circulating_label_1_balance -
	//       not_circulating_label_2_balance -
	//       not_circulating_label_3_balance
	//     );
	frame_dig 0 // asset: uint64
	asset_params_get AssetTotal
	pop
	frame_dig 1 // reserveBalance: uint64
	-
	frame_dig 2 // not_circulating_label_1_balance: uint64
	-
	frame_dig 3 // not_circulating_label_2_balance: uint64
	-
	frame_dig 4 // not_circulating_label_3_balance: uint64
	-

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

*create_NoOp:
	pushbytes 0xe748f6f7 // method "createApplication(uint64,address,address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x0b62c728 // method "set_not_circulating_address(address,string)void"
	pushbytes 0x5cc2c535 // method "arc62_get_circulating_supply(uint64)uint64"
	txna ApplicationArgs 0
	match *abi_route_set_not_circulating_address *abi_route_arc62_get_circulating_supply

	// this contract does not implement the given ABI method for call NoOp
	err