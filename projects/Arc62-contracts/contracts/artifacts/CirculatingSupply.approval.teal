#pragma version 10
intcblock 0 1
bytecblock 0x 0x67656e65726963 0x6275726e6564 0x6c6f636b6564 0x61737365745f6964

// This TEAL was generated by TEALScript v0.106.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// contracts\Arc62.algo.ts:18
	// this.asset_id.value = 0
	bytec 4 //  "asset_id"
	intc 0 // 0
	app_global_put

	// contracts\Arc62.algo.ts:20
	// this.not_circulating_label_1.value = globals.zeroAddress
	bytec 2 //  "burned"
	global ZeroAddress
	app_global_put

	// contracts\Arc62.algo.ts:22
	// this.not_circulating_label_2.value = globals.zeroAddress
	bytec 3 //  "locked"
	global ZeroAddress
	app_global_put

	// contracts\Arc62.algo.ts:24
	// this.not_circulating_label_3.value = globals.zeroAddress
	bytec 1 //  "generic"
	global ZeroAddress
	app_global_put
	retsub

// set_asset(uint64)void
*abi_route_set_asset:
	// asset_id: uint64
	txna ApplicationArgs 1
	btoi

	// execute set_asset(uint64)void
	callsub set_asset
	intc 1 // 1
	return

// set_asset(asset_id: uint64): void
//
// Set the ASA ID for the circulating supply - Authorization: ASA Manager Address
// @param asset_id ASA ID of the circulating supply
set_asset:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\Arc62.algo.ts:32
	// asset = AssetID.fromUint64(asset_id)
	frame_dig -1 // asset_id: uint64
	frame_bury 0 // asset: uint64

	// contracts\Arc62.algo.ts:33
	// assert(this.txn.sender === asset.manager && !this.asset_id.value, err.UNAUTHORIZED)
	txn Sender
	frame_dig 0 // asset: uint64
	asset_params_get AssetManager
	pop
	==
	dup
	bz *skip_and0
	bytec 4 //  "asset_id"
	app_global_get
	!
	&&

*skip_and0:
	// Unauthorized
	assert

	// contracts\Arc62.algo.ts:34
	// this.asset_id.value = asset_id
	bytec 4 //  "asset_id"
	frame_dig -1 // asset_id: uint64
	app_global_put
	retsub

// set_not_circulating_address(address,string)void
*abi_route_set_not_circulating_address:
	// label: string
	txna ApplicationArgs 2
	extract 2 0

	// address: address
	txna ApplicationArgs 1
	dup
	len
	pushint 32
	==

	// argument 1 (address) for set_not_circulating_address must be a address
	assert

	// execute set_not_circulating_address(address,string)void
	callsub set_not_circulating_address
	intc 1 // 1
	return

// set_not_circulating_address(address: Address, label: string): void
//
// Set non-circulating supply addresses - Authorization: ASA Manager Address
// @param address Address to assign to the label to
// @param label Not-circulating label selector
set_not_circulating_address:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\Arc62.algo.ts:43
	// asset = AssetID.fromUint64(this.asset_id.value)
	bytec 4 //  "asset_id"
	app_global_get
	frame_bury 0 // asset: uint64

	// contracts\Arc62.algo.ts:44
	// assert(this.txn.sender === asset.manager, err.UNAUTHORIZED)
	txn Sender
	frame_dig 0 // asset: uint64
	asset_params_get AssetManager
	pop
	==

	// Unauthorized
	assert

	// contracts\Arc62.algo.ts:45
	// assert(address.isOptedInToAsset(asset), err.NOT_OPTED_IN)
	frame_dig -1 // address: Address
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	swap
	pop

	// Not Opted-In
	assert

	// *if0_condition
	// contracts\Arc62.algo.ts:47
	// label === 'burned'
	frame_dig -2 // label: string
	bytec 2 //  "burned"
	==
	bz *if0_elseif1_condition

	// *if0_consequent
	// contracts\Arc62.algo.ts:48
	// this.not_circulating_label_1.value = address
	bytec 2 //  "burned"
	frame_dig -1 // address: Address
	app_global_put
	b *if0_end

*if0_elseif1_condition:
	// contracts\Arc62.algo.ts:49
	// label === 'locked'
	frame_dig -2 // label: string
	bytec 3 //  "locked"
	==
	bz *if0_elseif2_condition

	// *if0_elseif1_consequent
	// contracts\Arc62.algo.ts:50
	// this.not_circulating_label_2.value = address
	bytec 3 //  "locked"
	frame_dig -1 // address: Address
	app_global_put
	b *if0_end

*if0_elseif2_condition:
	// contracts\Arc62.algo.ts:51
	// label === 'generic'
	frame_dig -2 // label: string
	bytec 1 //  "generic"
	==
	bz *if0_else

	// *if0_elseif2_consequent
	// contracts\Arc62.algo.ts:52
	// this.not_circulating_label_3.value = address
	bytec 1 //  "generic"
	frame_dig -1 // address: Address
	app_global_put
	b *if0_end

*if0_else:
	// contracts\Arc62.algo.ts:54
	// assert(false, err.INVALID_LABEL)
	intc 0 // 0

	// Invalid Label
	assert

*if0_end:
	retsub

// arc62_get_circulating_supply(uint64)uint64
*abi_route_arc62_get_circulating_supply:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// asset_id: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc62_get_circulating_supply(uint64)uint64
	callsub arc62_get_circulating_supply
	itob
	concat
	log
	intc 1 // 1
	return

// arc62_get_circulating_supply(asset_id: uint64): uint64
//
// Get ASA circulating supply
// @param asset_id ASA ID of the circulating supply
// @returns ASA circulating supply
arc62_get_circulating_supply:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// contracts\Arc62.algo.ts:65
	// asset = AssetID.fromUint64(asset_id)
	frame_dig -1 // asset_id: uint64
	frame_bury 0 // asset: uint64

	// contracts\Arc62.algo.ts:66
	// assert(this.asset_id.value === asset.id, err.INVALID_ASSET_ID)
	bytec 4 //  "asset_id"
	app_global_get
	frame_dig 0 // asset: uint64
	==

	// Invalid ASA ID
	assert

	// contracts\Arc62.algo.ts:68
	// reserveBalance: uint64 = 0
	intc 0 // 0
	frame_bury 1 // reserveBalance: uint64

	// contracts\Arc62.algo.ts:69
	// notCirculatingLabel1Balance = 0
	intc 0 // 0
	frame_bury 2 // notCirculatingLabel1Balance: uint64

	// contracts\Arc62.algo.ts:70
	// notCirculatingLabel2Balance = 0
	intc 0 // 0
	frame_bury 3 // notCirculatingLabel2Balance: uint64

	// contracts\Arc62.algo.ts:71
	// notCirculatingLabel3Balance = 0
	intc 0 // 0
	frame_bury 4 // notCirculatingLabel3Balance: uint64

	// *if1_condition
	// contracts\Arc62.algo.ts:73
	// asset.reserve === globals.zeroAddress || asset.reserve.isOptedInToAsset(asset) === false
	frame_dig 0 // asset: uint64
	asset_params_get AssetReserve
	pop
	global ZeroAddress
	==
	dup
	bnz *skip_or0
	frame_dig 0 // asset: uint64
	asset_params_get AssetReserve
	pop
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	swap
	pop
	intc 0 // 0
	==
	||

*skip_or0:
	bz *if1_else

	// *if1_consequent
	// contracts\Arc62.algo.ts:74
	// reserveBalance = 0
	intc 0 // 0
	frame_bury 1 // reserveBalance: uint64
	b *if1_end

*if1_else:
	// contracts\Arc62.algo.ts:76
	// reserveBalance = asset.reserve.assetBalance(asset)
	frame_dig 0 // asset: uint64
	asset_params_get AssetReserve
	pop
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	pop
	frame_bury 1 // reserveBalance: uint64

*if1_end:
	// *if2_condition
	// contracts\Arc62.algo.ts:80
	// this.not_circulating_label_1.value === globals.zeroAddress ||
	//       this.not_circulating_label_1.value.isOptedInToAsset(asset) === false
	bytec 2 //  "burned"
	app_global_get
	global ZeroAddress
	==
	dup
	bnz *skip_or1
	bytec 2 //  "burned"
	app_global_get
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	swap
	pop
	intc 0 // 0
	==
	||

*skip_or1:
	bz *if2_else

	// *if2_consequent
	// contracts\Arc62.algo.ts:83
	// notCirculatingLabel1Balance = 0
	intc 0 // 0
	frame_bury 2 // notCirculatingLabel1Balance: uint64
	b *if2_end

*if2_else:
	// contracts\Arc62.algo.ts:85
	// notCirculatingLabel1Balance = this.not_circulating_label_1.value.assetBalance(asset)
	bytec 2 //  "burned"
	app_global_get
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	pop
	frame_bury 2 // notCirculatingLabel1Balance: uint64

*if2_end:
	// *if3_condition
	// contracts\Arc62.algo.ts:89
	// this.not_circulating_label_2.value === globals.zeroAddress ||
	//       this.not_circulating_label_2.value.isOptedInToAsset(asset) === false
	bytec 3 //  "locked"
	app_global_get
	global ZeroAddress
	==
	dup
	bnz *skip_or2
	bytec 3 //  "locked"
	app_global_get
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	swap
	pop
	intc 0 // 0
	==
	||

*skip_or2:
	bz *if3_else

	// *if3_consequent
	// contracts\Arc62.algo.ts:92
	// notCirculatingLabel2Balance = 0
	intc 0 // 0
	frame_bury 3 // notCirculatingLabel2Balance: uint64
	b *if3_end

*if3_else:
	// contracts\Arc62.algo.ts:94
	// notCirculatingLabel2Balance = this.not_circulating_label_2.value.assetBalance(asset)
	bytec 3 //  "locked"
	app_global_get
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	pop
	frame_bury 3 // notCirculatingLabel2Balance: uint64

*if3_end:
	// *if4_condition
	// contracts\Arc62.algo.ts:98
	// this.not_circulating_label_3.value === globals.zeroAddress ||
	//       this.not_circulating_label_3.value.isOptedInToAsset(asset) === false
	bytec 1 //  "generic"
	app_global_get
	global ZeroAddress
	==
	dup
	bnz *skip_or3
	bytec 1 //  "generic"
	app_global_get
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	swap
	pop
	intc 0 // 0
	==
	||

*skip_or3:
	bz *if4_else

	// *if4_consequent
	// contracts\Arc62.algo.ts:101
	// notCirculatingLabel3Balance = 0
	intc 0 // 0
	frame_bury 4 // notCirculatingLabel3Balance: uint64
	b *if4_end

*if4_else:
	// contracts\Arc62.algo.ts:103
	// notCirculatingLabel3Balance = this.not_circulating_label_3.value.assetBalance(asset)
	bytec 1 //  "generic"
	app_global_get
	frame_dig 0 // asset: uint64
	asset_holding_get AssetBalance
	pop
	frame_bury 4 // notCirculatingLabel3Balance: uint64

*if4_end:
	// contracts\Arc62.algo.ts:106
	// return (
	//       asset.total -
	//       reserveBalance -
	//       notCirculatingLabel1Balance -
	//       notCirculatingLabel2Balance -
	//       notCirculatingLabel3Balance
	//     );
	frame_dig 0 // asset: uint64
	asset_params_get AssetTotal
	pop
	frame_dig 1 // reserveBalance: uint64
	-
	frame_dig 2 // notCirculatingLabel1Balance: uint64
	-
	frame_dig 3 // notCirculatingLabel2Balance: uint64
	-
	frame_dig 4 // notCirculatingLabel3Balance: uint64
	-

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x709b80a8 // method "set_asset(uint64)void"
	pushbytes 0x0b62c728 // method "set_not_circulating_address(address,string)void"
	pushbytes 0x5cc2c535 // method "arc62_get_circulating_supply(uint64)uint64"
	txna ApplicationArgs 0
	match *abi_route_set_asset *abi_route_set_not_circulating_address *abi_route_arc62_get_circulating_supply

	// this contract does not implement the given ABI method for call NoOp
	err